{"version":3,"sources":["config/socketio.js"],"names":["socketio","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","data","nsp","name","onDisconnect","onConnect","require","register"],"mappings":"AAAA;;;AAGA;;;;;;;;;;kBA0Be,UAASA,QAAT,EAAmB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,aAASC,EAAT,CAAY,YAAZ,EAA0B,UAASC,MAAT,EAAiB;AACvCA,eAAOC,OAAP,GAAiBD,OAAOE,OAAP,CAAeC,UAAf,CAA0BC,aAA1B,GACb,GADa,GACPJ,OAAOE,OAAP,CAAeC,UAAf,CAA0BE,UADpC;;AAGAL,eAAOM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,eAAOQ,GAAP,GAAa,YAAkB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAC3B,iCAAQD,GAAR,gCAAwBR,OAAOU,GAAP,CAAWC,IAAnC,UAA4CX,OAAOC,OAAnD,eAAkEQ,IAAlE;AACH,SAFD;;AAIA;AACAT,eAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1Ba,yBAAaZ,MAAb;AACAA,mBAAOQ,GAAP,CAAW,cAAX;AACH,SAHD;;AAKA;AACAK,kBAAUb,MAAV;AACAA,eAAOQ,GAAP,CAAW,WAAX;AACH,KAnBD;AAoBH,C;;AA5DD;;;;;;AAEA;AACA,SAASI,YAAT,CAAsBZ,MAAtB,EAA8B,CAAE;;AAEhC;AACA,SAASa,SAAT,CAAmBb,MAAnB,EAA2B;AACvB;AACAA,WAAOD,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACtBC,eAAOQ,GAAP,CAAW,yBAAeC,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACH,KAFD;;AAIA;AACAK,YAAQ,iCAAR,EAA2CC,QAA3C,CAAoDf,MAApD;AACAc,YAAQ,+BAAR,EAAyCC,QAAzC,CAAkDf,MAAlD;AACAc,YAAQ,mCAAR,EAA6CC,QAA7C,CAAsDf,MAAtD;AACAc,YAAQ,iCAAR,EAA2CC,QAA3C,CAAoDf,MAApD;AACAc,YAAQ,mCAAR,EAA6CC,QAA7C,CAAsDf,MAAtD;AACAc,YAAQ,sCAAR,EAAgDC,QAAhD,CAAyDf,MAAzD;AACAc,YAAQ,2BAAR,EAAqCC,QAArC,CAA8Cf,MAA9C;AACAc,YAAQ,2BAAR,EAAqCC,QAArC,CAA8Cf,MAA9C;AAEH","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nimport config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n    // When the client emits 'info', this listens and executes\n    socket.on('info', data => {\n        socket.log(JSON.stringify(data, null, 2));\n    });\n\n    // Insert sockets below\n    require('../api/favorite/favorite.socket').register(socket);\n    require('../api/website/website.socket').register(socket);\n    require('../api/performer/performer.socket').register(socket);\n    require('../api/location/location.socket').register(socket);\n    require('../api/eventType/eventType.socket').register(socket);\n    require('../api/eventType/eventType.socket.js').register(socket);\n    require('../api/event/event.socket').register(socket);\n    require('../api/thing/thing.socket').register(socket);\n\n}\n\nexport default function(socketio) {\n    // socket.io (v1.x.x) is powered by debug.\n    // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n    //\n    // ex: DEBUG: \"http*,socket.io:socket\"\n\n    // We can authenticate socket.io users and access their token through socket.decoded_token\n    //\n    // 1. You will need to send the token in `client/components/socket/socket.service.js`\n    //\n    // 2. Require authentication here:\n    // socketio.use(require('socketio-jwt').authorize({\n    //   secret: config.secrets.session,\n    //   handshake: true\n    // }));\n\n    socketio.on('connection', function(socket) {\n        socket.address = socket.request.connection.remoteAddress +\n            ':' + socket.request.connection.remotePort;\n\n        socket.connectedAt = new Date();\n\n        socket.log = function(...data) {\n            console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n        };\n\n        // Call onDisconnect.\n        socket.on('disconnect', () => {\n            onDisconnect(socket);\n            socket.log('DISCONNECTED');\n        });\n\n        // Call onConnect.\n        onConnect(socket);\n        socket.log('CONNECTED');\n    });\n}"]}