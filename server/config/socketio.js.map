{"version":3,"sources":["config/socketio.js"],"names":["socketio","on","socket","address","request","connection","remoteAddress","remotePort","connectedAt","Date","log","data","nsp","name","onDisconnect","onConnect","require","register"],"mappings":"AAAA;;;AAGA;;;;;;;;;;kBA0Be,UAASA,QAAT,EAAmB;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAASC,EAAT,CAAY,YAAZ,EAA0B,UAASC,MAAT,EAAiB;AACzCA,WAAOC,OAAP,GAAiBD,OAAOE,OAAP,CAAeC,UAAf,CAA0BC,aAA1B,GACf,GADe,GACTJ,OAAOE,OAAP,CAAeC,UAAf,CAA0BE,UADlC;;AAGAL,WAAOM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,WAAOQ,GAAP,GAAa,YAAkB;AAAA;;AAAA,wCAANC,IAAM;AAANA,YAAM;AAAA;;AAC7B,2BAAQD,GAAR,gCAAwBR,OAAOU,GAAP,CAAWC,IAAnC,UAA4CX,OAAOC,OAAnD,eAAkEQ,IAAlE;AACD,KAFD;;AAIA;AACAT,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5Ba,mBAAaZ,MAAb;AACAA,aAAOQ,GAAP,CAAW,cAAX;AACD,KAHD;;AAKA;AACAK,cAAUb,MAAV;AACAA,WAAOQ,GAAP,CAAW,WAAX;AACD,GAnBD;AAoBD,C;;AA5DD;;;;;;AAEA;AACA,SAASI,YAAT,CAAsBZ,MAAtB,EAA8B,CAC7B;;AAED;AACA,SAASa,SAAT,CAAmBb,MAAnB,EAA2B;AACzB;AACAA,SAAOD,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxBC,WAAOQ,GAAP,CAAW,yBAAeC,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;;AAIA;AACAK,UAAQ,+BAAR,EAAyCC,QAAzC,CAAkDf,MAAlD;AACAc,UAAQ,mCAAR,EAA6CC,QAA7C,CAAsDf,MAAtD;AACAc,UAAQ,iCAAR,EAA2CC,QAA3C,CAAoDf,MAApD;AACAc,UAAQ,mCAAR,EAA6CC,QAA7C,CAAsDf,MAAtD;AACAc,UAAQ,sCAAR,EAAgDC,QAAhD,CAAyDf,MAAzD;AACAc,UAAQ,2BAAR,EAAqCC,QAArC,CAA8Cf,MAA9C;AACAc,UAAQ,2BAAR,EAAqCC,QAArC,CAA8Cf,MAA9C;AAED","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nimport config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  require('../api/website/website.socket').register(socket);\n  require('../api/performer/performer.socket').register(socket);\n  require('../api/location/location.socket').register(socket);\n  require('../api/eventType/eventType.socket').register(socket);\n  require('../api/eventType/eventType.socket.js').register(socket);\n  require('../api/event/event.socket').register(socket);\n  require('../api/thing/thing.socket').register(socket);\n\n}\n\nexport default function(socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function(socket) {\n    socket.address = socket.request.connection.remoteAddress +\n      ':' + socket.request.connection.remotePort;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function(...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n  });\n}\n"]}