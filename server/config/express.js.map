{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","urlencoded","extended","json","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection","ignore"],"mappings":"AAAA;;;;AAIA;;;;;;kBAkBe,UAASA,GAAT,EAAc;AACzB,QAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,QAAID,QAAQ,aAAR,IAAyBA,QAAQ,MAArC,EAA6C;AACzCD,YAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACH;;AAED,QAAIL,QAAQ,YAAZ,EAA0B;AACtBD,YAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACH;;AAEDN,QAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,QAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,QAAIO,GAAJ,CAAQ,OAAR,EAAiB,sBAAOD,IAAP,GAAc,eAA/B;AACAN,QAAIQ,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAV,QAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,QAAIG,GAAJ,CAAQ,4BAAR;AACAH,QAAIG,GAAJ,CAAQ,qBAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAZ,QAAIG,GAAJ,CAAQ,qBAAWU,IAAX,EAAR;AACAb,QAAIG,GAAJ,CAAQ,+BAAR;AACAH,QAAIG,GAAJ,CAAQ,6BAAR;;AAEA;AACA;AACA;AACAH,QAAIG,GAAJ,CAAQ,8BAAQ;AACZW,gBAAQ,sBAAOC,OAAP,CAAeC,OADX;AAEZC,2BAAmB,IAFP;AAGZC,gBAAQ,KAHI;AAIZC,eAAO,IAAIC,UAAJ,CAAe;AAClBC,gCAAoB,mBAASC,UADX;AAElBC,gBAAI;AAFc,SAAf;AAJK,KAAR,CAAR;;AAUA;;;;AAIA,QAAItB,QAAQ,MAAR,IAAkB,CAACuB,QAAQvB,GAAR,CAAYwB,cAAnC,EAAmD;AAC/CzB,YAAIG,GAAJ,CAAQ,qBAAM;AACV;AACA;AACA;AACAuB,oBAAQ,YAJE;AAKVC,kBAAM;AACFC,wBAAQ,QADN,EACgB;AAClBC,mCAAmB,IAFjB;AAGFC,yBAAS;AAHP,aALI;AAUVC,2BAAe;AAVL,SAAN,CAAR;AAYH;;AAED,QAAI,kBAAkB9B,GAAtB,EAA2B;AACvBD,YAAIG,GAAJ,CAAQM,QAAQ,oBAAR,EAA8B;AAClCuB,oBAAQ,CACJ,cADI,EAEJ,cAFI,EAEY,eAFZ,EAE6B,eAF7B,EAE8C,eAF9C,EAE+D,gBAF/D,EAGJ,eAHI,EAGa,eAHb,EAG8B,gBAH9B,EAGgD,eAHhD,EAGiE,eAHjE;AAD0B,SAA9B,CAAR;AAOH;;AAED,QAAI,kBAAkB/B,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AACzCD,YAAIG,GAAJ,CAAQ,6BAAR,EADyC,CAChB;AAC5B;AACJ,C;;AArFD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIiB,aAAa,qDAAjB","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n    var env = app.get('env');\n\n    if (env === 'development' || env === 'test') {\n        app.use(express.static(path.join(config.root, '.tmp')));\n    }\n\n    if (env === 'production') {\n        app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    }\n\n    app.set('appPath', path.join(config.root, 'client'));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n\n    app.set('views', config.root + '/server/views');\n    app.engine('html', require('ejs').renderFile);\n    app.set('view engine', 'html');\n    app.use(compression());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    app.use(methodOverride());\n    app.use(cookieParser());\n\n    // Persist sessions with MongoStore / sequelizeStore\n    // We need to enable sessions for passport-twitter because it's an\n    // oauth 1.0 strategy, and Lusca depends on sessions\n    app.use(session({\n        secret: config.secrets.session,\n        saveUninitialized: true,\n        resave: false,\n        store: new MongoStore({\n            mongooseConnection: mongoose.connection,\n            db: 'show-by-date'\n        })\n    }));\n\n    /**\n     * Lusca - express server security\n     * https://github.com/krakenjs/lusca\n     */\n    if (env !== 'test' && !process.env.SAUCE_USERNAME) {\n        app.use(lusca({\n            // csrf: {\n            //   angular: true\n            // },\n            xframe: 'SAMEORIGIN',\n            hsts: {\n                maxAge: 31536000, //1 year, in seconds\n                includeSubDomains: true,\n                preload: true\n            },\n            xssProtection: true\n        }));\n    }\n\n    if ('development' === env) {\n        app.use(require('connect-livereload')({\n            ignore: [\n                /^\\/api\\/(.*)/,\n                /\\.js(\\?.*)?$/, /\\.css(\\?.*)?$/, /\\.svg(\\?.*)?$/, /\\.ico(\\?.*)?$/, /\\.woff(\\?.*)?$/,\n                /\\.png(\\?.*)?$/, /\\.jpg(\\?.*)?$/, /\\.jpeg(\\?.*)?$/, /\\.gif(\\?.*)?$/, /\\.pdf(\\?.*)?$/\n            ]\n        }));\n    }\n\n    if ('development' === env || 'test' === env) {\n        app.use(errorHandler()); // Error handler - has to be last\n    }\n}"]}