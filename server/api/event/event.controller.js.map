{"version":3,"sources":["api/event/event.controller.js"],"names":["index","getEventByDatesRangeAndType","show","create","update","destroy","destroyAll","test","moment","require","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","removeAllEntity","handleEntityNotFound","handleError","console","log","err","send","req","find","populate","exec","catch","dateFrom","params","eventType","dateTo","limit","Number","skip","findOne","eventTypeName","response","events","total","query","_id","getSearch","sort","count","findById","id","body","request","cheerio","uri","error","$","load","list"],"mappings":"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","file":"event.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /y              ->  index\n * POST    /y              ->  create\n * GET     /y/:id          ->  show\n * PUT     /y/:id          ->  update\n * DELETE  /y/:id          ->  destroy\n */\n'use strict';\n\nimport _ from 'lodash';\nimport Event from './event.model';\nimport EventType from '../eventType/eventType.model'\nvar moment = require('moment');\n\nfunction respondWithResult(res, statusCode) {\n\n    statusCode = statusCode || 200;\n    return function(entity) {\n        if (entity) {\n            res.status(statusCode).json(entity);\n        }\n    };\n}\n\nfunction saveUpdates(updates) {\n    return function(entity) {\n        var updated = _.merge(entity, updates);\n        return updated.save()\n            .then(updated => {\n                return updated;\n            });\n    };\n}\n\nfunction removeEntity(res) {\n    return function(entity) {\n        if (entity) {\n            return entity.remove()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction removeAllEntity(res) {\n    return function() {\n        if (entity) {\n            return entity.remove()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function(entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    console.log(res)\n    statusCode = statusCode || 500;\n    return function(err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Events\nexport function index(req, res) {\n    return Event.find()\n        .populate('eventType performer location website')\n        .exec()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\nexport function getEventByDatesRangeAndType(req, res) {\n    let dateFrom = req.params.dateFrom //moment.unix(req.params.dateFrom / 1000).toDate();\n    let eventType = req.params.eventType;\n    let dateTo = req.params.dateTo; // moment.unix(req.params.dateTo / 1000).toDate();\n\n    let limit = Number(req.params.limit);\n    let skip = Number(req.params.skip);\n    EventType.findOne({ eventTypeName: eventType })\n        .then(\n            function(response) {\n                if (!response) {\n                    handleError(res)({\n                        events: [],\n                        total: 0\n                    });\n                } else {\n                    let query = {\n                        \"endDate\": { \"$gte\": dateFrom },\n                        \"startDate\": { \"$lt\": dateTo },\n                        'eventType': response._id\n                    };\n                    getSearch(res, query, limit, skip);\n                }\n\n            },\n            function(response) {\n                handleError(res);\n            });\n};\n\nfunction getSearch(res, query, limit, skip) {\n    return Event.find(query)\n        .sort({ 'favorite': -1, 'startDate': '-1' })\n        .limit(limit)\n        .skip(skip)\n        .populate('eventType performer location website')\n        .exec(function(err, events) {\n            Event.count(query).exec(function(err, count) {\n                res.status(200).json({\n                    events: events,\n                    total: count\n                });\n                //respondWithResult()\n            })\n        })\n        //.exec()\n        //.then(respondWithResult(res))\n        .catch(handleError(res));\n\n}\n\n// Gets a single Event from the DB\nexport function show(req, res) {\n    console.log(\"show\");\n    return Event.findById(req.params.id)\n        .populate('eventType')\n        .exec()\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Event in the DB\nexport function create(req, res) {\n    return Event.create(req.body)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n// Updates an existing Event in the DB\nexport function update(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Event.findById(req.params.id).exec()\n        .then(handleEntityNotFound(res))\n        .then(saveUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Event from the DB\nexport function destroy(req, res) {\n    return Event.findById(req.params.id).exec()\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n\n// Deletes all events\nexport function destroyAll(req, res) {\n    Event.find().exec()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n    //return Event.remove({}).exec()\n    //  .then(respondWithResult(\"ok\",200))\n    //  .then(respondWithResult(\"ok\",200))\n    //  .catch(handleError(res));\n}\n\n//test function\n\nexport function test(req, res) {\n    console.log(\"Start:\")\n    var request = require(\"request\");\n    var cheerio = require(\"cheerio\");\n\n    request({\n        uri: \"http://ionicabizau.net\",\n    }, function(error, response, body) {\n        var $ = cheerio.load(body);\n        console.log(\"Got Body\");\n\n        ///console.log($);\n\n        var list = [];\n        var index = 0\n\n        console.log(\"Body:\", body)\n        console.log(\"Left:\", $(\"a\")[0])\n            //$(\"a\").each(function() {\n            //  index++\n            //  console.log($(\".header h1\").text());\n            //\n            //  //console.log(text + \" -> \" + href);\n            //  res.status(200).json({\"test\":$(\".header h1\").text()});\n            //});\n\n    });\n\n    //\n}"]}