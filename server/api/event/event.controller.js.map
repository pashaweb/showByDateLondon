{"version":3,"sources":["api/event/event.controller.js"],"names":["index","getEventByDatesRangeAndType","show","create","update","destroy","destroyAll","test","moment","require","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","removeAllEntity","handleEntityNotFound","handleError","console","log","err","send","req","find","populate","exec","catch","dateFrom","params","eventType","dateTo","limit","Number","skip","findOne","eventTypeName","response","events","total","query","_id","getSearch","sort","count","findById","id","body","request","cheerio","uri","error","$","load","list"],"mappings":"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","file":"event.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /y              ->  index\n * POST    /y              ->  create\n * GET     /y/:id          ->  show\n * PUT     /y/:id          ->  update\n * DELETE  /y/:id          ->  destroy\n */\n'use strict';\n\nimport _ from 'lodash';\nimport Event from './event.model';\nimport EventType from '../eventType/eventType.model'\nvar moment = require('moment');\n\nfunction respondWithResult(res, statusCode) {\n\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function (entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction removeAllEntity(res) {\n  return function () {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  console.log(res)\n  statusCode = statusCode || 500;\n  return function (err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Events\nexport function index(req, res) {\n  return Event.find()\n    .populate('eventType performer location website')\n    .exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nexport function getEventByDatesRangeAndType(req, res) {\n  let dateFrom = req.params.dateFrom //moment.unix(req.params.dateFrom / 1000).toDate();\n  let eventType = req.params.eventType;\n  let dateTo = req.params.dateTo;// moment.unix(req.params.dateTo / 1000).toDate();\n\n  let limit = Number(req.params.limit);\n  let skip = Number(req.params.skip);\n  EventType.findOne({eventTypeName:eventType})\n    .then(\n      function(response){\n        if(!response){\n          handleError(res)({\n            events: [],\n            total: 0\n          });\n        }else{\n          let query = {\"startDate\": {\"$gte\": dateFrom, \"$lt\": dateTo},'eventType':response._id};\n          getSearch(res,query,limit,skip);\n        }\n\n      },\n      function(response){\n        handleError(res);\n      });\n};\n\nfunction getSearch(res,query,limit,skip){\n  return Event.find(query)\n      .sort({'startDate': 'desc'})\n      .limit(limit)\n      .skip(skip)\n      .populate('eventType performer location website')\n      .exec(function (err, events) {\n        Event.count(query).exec(function (err, count) {\n          res.status(200).json({\n            events: events,\n            total: count\n          });\n          //respondWithResult()\n        })\n      })\n      //.exec()\n      //.then(respondWithResult(res))\n      .catch(handleError(res));\n\n}\n\n// Gets a single Event from the DB\nexport function show(req, res) {\n  console.log(\"show\");\n  return Event.findById(req.params.id)\n    .populate('eventType')\n    .exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Event in the DB\nexport function create(req, res) {\n  return Event.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Event in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Event from the DB\nexport function destroy(req, res) {\n  return Event.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n\n// Deletes all events\nexport function destroyAll(req, res) {\n  Event.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n  //return Event.remove({}).exec()\n  //  .then(respondWithResult(\"ok\",200))\n  //  .then(respondWithResult(\"ok\",200))\n  //  .catch(handleError(res));\n}\n\n//test function\n\nexport function test(req, res) {\n  console.log(\"Start:\")\n  var request = require(\"request\");\n  var cheerio = require(\"cheerio\");\n\n  request({\n    uri: \"http://ionicabizau.net\",\n  }, function (error, response, body) {\n    var $ = cheerio.load(body);\n    console.log(\"Got Body\");\n\n    ///console.log($);\n\n    var list = [];\n    var index = 0\n\n    console.log(\"Body:\", body)\n    console.log(\"Left:\", $(\"a\")[0])\n    //$(\"a\").each(function() {\n    //  index++\n    //  console.log($(\".header h1\").text());\n    //\n    //  //console.log(text + \" -> \" + href);\n    //  res.status(200).json({\"test\":$(\".header h1\").text()});\n    //});\n\n  });\n\n  //\n}\n"]}