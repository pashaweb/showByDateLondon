{"version":3,"sources":["job/ticketmaster.js"],"names":["job","moment","require","Client","client","webSiteName","saveToDB","venues","events","webSiteID","websiteUrl","config","url","eventType","performerType","currentConfigIndex","req","res","getWebSiteID","status","json","message","findOne","name","then","response","_id","getEvents","create","rating","logoUrl","defaultImageUrl","active","get","data","docs","map","eventName","ev","AttractionName","length","pop","venue","VenueAddress","VenueName","performers","attraction","VenueAttractionSeoLink","location","startDate","tz","EventDate","format","endDate","performer","price","eventImage","AttractionImage","website","console","log","myMap","i","tempFromMap","set","forEach","value","key","push","save","endProcess"],"mappings":"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","file":"ticketmaster.js","sourcesContent":["import website from '../api/website/website.model';\r\nlet moment = require('moment-timezone');\r\nconst Client = require('node-rest-client').Client;\r\nconst client = new Client();\r\nconst webSiteName = \"ticketmaster.co.uk\";\r\nlet saveToDB = require('./util/saveToDB');\r\nlet venues = new Map();\r\nlet events = [];\r\nlet webSiteID = \"\";\r\nlet websiteUrl = \"http://www.ticketmaster.co.uk\";\r\nlet config = [\r\n    { url: 'http://www.ticketmaster.co.uk/json/browse/sports?select=n186&dma_id=602', eventType: 'SportEvent', performerType: 'SportPerformer' },\r\n    { url: 'http://www.ticketmaster.co.uk/json/browse/music?select=n186&dma_id=602', eventType: 'MusicEvent', performerType: 'MusicPerformer' },\r\n    { url: 'http://www.ticketmaster.co.uk/json/browse/arts?select=n186&dma_id=602', eventType: 'TheaterEvent', performerType: 'TheaterPerformer' }\r\n]\r\nlet currentConfigIndex = 0;\r\n\r\nexport function job(req, res) {\r\n    getWebSiteID();\r\n    return res.status(200).json({ message: \"process started\" })\r\n}\r\n\r\nfunction getWebSiteID(res) {\r\n    website.findOne({ name: webSiteName })\r\n        .then(function(response) {\r\n            if (response !== null) {\r\n                webSiteID = response._id;\r\n                //parceResult(data, res);\r\n                getEvents();\r\n            } else {\r\n                website.create({\r\n                    name: webSiteName,\r\n                    websiteUrl: websiteUrl,\r\n                    rating: 5,\r\n                    logoUrl: \"\",\r\n                    defaultImageUrl: \"\",\r\n                    active: true\r\n                }).then(function(response) {\r\n                    webSiteID = response._id;\r\n                    getEvents();\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nfunction getEvents() {\r\n    client.get(config[currentConfigIndex].url,\r\n        function(data, response) {\r\n            events = data.response.docs.map(ev => {\r\n                //let venue = venues.get(ev.VenueId);\r\n                let eventName = ev.AttractionName[ev.AttractionName.length - 1];\r\n\r\n                if (ev.AttractionName.length > 1) {\r\n                    ev.AttractionName.pop();\r\n                }\r\n                let venue = {\r\n                    \"type\": \"Place\",\r\n                    \"address\": {\r\n                        \"type\": \"PostalAddress\",\r\n                        \"addressLocality\": ev.VenueAddress,\r\n                        \"streetAddress\": \"London\"\r\n                    },\r\n                    \"name\": ev.VenueName\r\n                }\r\n                let performers = ev.AttractionName.map(attraction => {\r\n                    return {\r\n                        '@type': config[currentConfigIndex].performerType,\r\n                        'name': attraction\r\n                    }\r\n                })\r\n                return {\r\n                    '@type': config[currentConfigIndex].eventType,\r\n                    name: eventName,\r\n                    url: websiteUrl + ev.VenueAttractionSeoLink,\r\n                    location: venue,\r\n                    startDate: moment.tz(ev.EventDate, \"Europe/London\").format('x'), ///el('.event-meta strong').attr('content'),\r\n                    endDate: moment.tz(ev.EventDate, \"Europe/London\").format('x'),\r\n                    performer: performers,\r\n                    price: '',\r\n                    eventImage: (ev.AttractionImage[0] && ev.AttractionImage[0]) ? 'http://media.ticketmaster.co.uk' + ev.AttractionImage[0] : '',\r\n                    active: true,\r\n                    website: webSiteID\r\n                }\r\n            });\r\n            console.log(events);\r\n            if (config[currentConfigIndex].eventType == 'TheaterEvent') {\r\n                var myMap = new Map();\r\n                for (let i = 0; i < events.length; i++) {\r\n                    let name = events[i].name;\r\n                    let tempFromMap = myMap.get(name);\r\n                    if (tempFromMap == null) {\r\n                        myMap.set(name, events[i])\r\n                    } else {\r\n                        tempFromMap.endDate = events[i].endDate;\r\n                        myMap.set(name, tempFromMap);\r\n\r\n                    }\r\n                }\r\n                events = []\r\n                myMap.forEach(function(value, key) {\r\n                    events.push(value)\r\n                });\r\n            }\r\n\r\n            saveToDB.save(events, webSiteID, endProcess);\r\n            currentConfigIndex += 1;\r\n            if (currentConfigIndex < config.length) {\r\n                getEvents();\r\n            }\r\n        });\r\n}\r\n\r\nfunction endProcess() {\r\n    currentConfigIndex = 0;\r\n    console.log('End Process')\r\n}"]}