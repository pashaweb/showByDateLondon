{"version":3,"sources":["app.js"],"names":["Promise","require","cors","connect","mongo","uri","options","connection","on","err","console","error","process","exit","seedDB","app","use","server","createServer","socketio","serveClient","env","path","default","EventEmitter","prototype","_maxListeners","startServer","angularFullstack","listen","port","ip","log","get","exports","module"],"mappings":"AAAA;;;;AAIA;AACA;;;;;;AAEA;;;;AACA;;;;AAGA;;;;AACA;;;;;;AAJiC;AACjC,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB,C,CAF+B;;AAG/B,IAAIC,OAAOD,QAAQ,MAAR,CAAX,C,CAC2C;;;AAG3C;AACA,mBAASE,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,sBAAOD,KAAP,CAAaE,OAAhD;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC5CC,UAAQC,KAAR,CAAc,+BAA+BF,GAA7C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd;AACD,CAHD;;AAKA;AACA,IAAI,sBAAOC,MAAX,EAAmB;AAAEb,UAAQ,eAAR;AAA2B;;AAEhD;AACA,IAAIc,MAAM,wBAAV;AACAA,IAAIC,GAAJ,CAAQd,MAAR;AACA,IAAIe,SAAS,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;AACA,IAAII,WAAWlB,QAAQ,WAAR,EAAqBgB,MAArB,EAA6B;AAC1CG,eAAa,sBAAOC,GAAP,KAAe,YADc;AAE1CC,QAAM;AAFoC,CAA7B,CAAf;AAIArB,QAAQ,mBAAR,EAA6BsB,OAA7B,CAAqCJ,QAArC;AACAlB,QAAQ,kBAAR,EAA4BsB,OAA5B,CAAoCR,GAApC;AACAd,QAAQ,UAAR,EAAoBsB,OAApB,CAA4BR,GAA5B,E,CAAkC;AAClCd,QAAQ,QAAR,EAAkBuB,YAAlB,CAA+BC,SAA/B,CAAyCC,aAAzC,GAAyD,CAAzD;;AAEA;AACA,SAASC,WAAT,GAAuB;AACrBZ,MAAIa,gBAAJ,GAAuBX,OAAOY,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACtErB,YAAQsB,GAAR,CAAY,4CAAZ,EAA0D,sBAAOF,IAAjE,EAAuEf,IAAIkB,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAED,4BAAaN,WAAb;;AAEA;AACAO,UAAUC,OAAOD,OAAP,GAAiBnB,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n//Starting point of the server, called from an root/index.js\n'use strict';\n\nimport express from 'express'; // express is a node server\nimport mongoose from 'mongoose'; // database connection layer\nmongoose.Promise = require('bluebird');\nvar cors = require('cors')\nimport config from './config/environment'; //gets my configurations\nimport http from 'http';\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n  console.error('MongoDB connection error: ' + err);\n  process.exit(-1);\n});\n\n// Populate databases with sample data\nif (config.seedDB) { require('./config/seed'); }\n\n// Setup server\nvar app = express();\napp.use(cors());\nvar server = http.createServer(app);\nvar socketio = require('socket.io')(server, {\n  serveClient: config.env !== 'production',\n  path: '/socket.io-client'\n});\nrequire('./config/socketio').default(socketio);\nrequire('./config/express').default(app);\nrequire('./routes').default(app); //get routes from root/routs.js\nrequire('events').EventEmitter.prototype._maxListeners = 0;\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"]}